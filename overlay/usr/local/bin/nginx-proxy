#!/bin/bash
# Copyright (C) 2015, John Carver <dude4linux@gmail.com>

  # This program is free software: you can redistribute it and/or modify
  # it under the terms of the GNU General Public License as published by
  # the Free Software Foundation, either version 3 of the License, or
  # (at your option) any later version.

  # This program is distributed in the hope that it will be useful,
  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  # GNU General Public License at (http://www.gnu.org/licenses/) for
  # more details.

PROGNAME=$(basename $0)
VERSION="2.0"

info() { echo "INFO: $@"; }
fatal() { echo "FATAL: $@" 1>&2; exit 2; }

usage() {
cat <<EOF
${PROGNAME} version ${VERSION}: GNU General Public License version 3
Create site configuration to proxy requests destined for domain to container

Syntax: ${PROGNAME} [-d|--domain] domain [-n|--name] container [-r|--remove]

Arguments::

    domain           source domain
    container        destination container name

Options::

    -h --help        usage: display this message
    -d --domain      source domain
    -n --name        container name
    -l --list        list domains and containers
    -r --remove      remove a proxy from domain to container
    -c --check       indicate if any changes would be made

Examples::

    # create a proxy from domain 'www.example.com' to container 'wordpress' 
    ${PROGNAME} --domain www.example.com --name wordpress

    # remove a proxy from domain 'www.example.com' to container 'wordpress'
    ${PROGNAME} --remove -d www.example.com -n wordpress

    # run in check-mode making no changes, but indicating what would be changed
    ${PROGNAME} --check -d www.example.com -n wordpress

Exit Codes::

        0            no changes were made or would have been made (check-mode)
        1            changes were made or would have been made (check-mode)
        2            fatal error prevented command completion

Notes::

    # also supports the v13.0 syntax
    ${PROGNAME} www.example.com wordpress

    # template (preconfigured for 80, 443, 12320, 12321, 12322)
    /etc/nginx/sites-available/container.tmpl

EOF
exit 0;
}

## remove proxy
remove_proxy() {
  # remove cert and key only when referenced by a single proxy
  # multiple domains may be proxied to the same container
  if [ $(grep -l ${name} /etc/nginx/sites-available/* | wc -l) -eq 1 ]; then
    if [ -f ${lxc_container_cert} ]; then
      changed=1
      [ ${check} -eq 0 ] && rm -f ${lxc_container_cert}
    fi
    if [ -f ${lxc_container_key} ]; then
      changed=1
      [ ${check} -eq 0 ] && rm -f ${lxc_container_key}
    fi
  fi

  if [ -f ${site_enabled} ]; then
    changed=1
    [ ${check} -eq 0 ] && rm -f ${site_enabled}
  fi
  if [ -f ${site_available} ]; then
    changed=1
    [ ${check} -eq 0 ] && rm -f ${site_available}
  fi

  if [ ${changed} -eq 1 ]; then
    if [ ${check} -eq 1 ]; then
      info "check-mode: would have removed ${domain} proxy ${name}"
    else
      # remove domain entry from hosts.conf
      sed -i "/^${host_ip}\s*${domain}/ d" ${hosts}

      info "removed ${domain} proxy ${name}"
      /etc/init.d/nginx reload;
      /etc/init.d/dnsmasq reload;
    fi
    exit 1;
  else
    if [ ${check} -eq 1 ]; then
      info "check-mode: no change: ${domain} proxy ${name} does not exist"
    else
      info "no change: ${domain} proxy ${name} does not exist"
    fi
    exit 0;
  fi
}

## create proxy
create_proxy() {
  cp ${template} ${site_available}
  sed -i "s|DOMAIN|${domain}|" ${site_available}
  sed -i "s|CONTAINER|${name}|" ${site_available}
  sed -i "s|CERT|${lxc_container_cert}|" ${site_available}
  sed -i "s|KEY|${lxc_container_key}|" ${site_available}

  [ -e "${site_enabled}" ]  || ln -s ${site_available} ${site_enabled}

  # add domain entry to hosts.conf
  grep -q "^${host_ip}\s?${domain}" ${hosts} || printf "%-18s %s\n" ${host_ip} ${domain} >> ${hosts}

  info "created ${domain} proxy ${name}"
  /etc/init.d/nginx reload
  /etc/init.d/dnsmasq reload;
  exit 1;
}

## list proxies
list_proxies() {
  sites="/etc/nginx/sites-available/*"
  for site in ${sites}; do
    domain=$(basename ${site})
    [ "${domain}" == "container.tmpl" ] && continue
    container=$(sed -n "0,/proxy_pass/ s|^.*http://\(.*\)/;.*$|\1|p" ${site})
    if [ "${container}" != "" ]; then
     printf "%-20s %s\n" ${domain} ${container}
    fi
  done
}

remove=0
check=0

while [[ -n $1 ]]; do
    case "$1" in
        -h|--help)      usage; exit 0 ;;
        -d|--domain)    domain=$2; shift ;;
        -n|--name)      name=$2; shift ;;
        -l|--list)      list_proxies; exit 0 ;;
        -r|--remove)    remove=1 ;;
        -c|--check)     check=1 ;;
         *)             domain=$1; name=$2; break ;;
    esac
    shift
done

# vars
template="/etc/nginx/sites-available/container.tmpl"
lxc_container_cert="/etc/ssl/private/lxc-${name}-cert.crt"
lxc_container_key="/etc/ssl/private/lxc-${name}-cert.key"
site_enabled="/etc/nginx/sites-enabled/${domain}"
site_available="/etc/nginx/sites-available/${domain}"
hosts="/etc/lxc/hosts.conf"
host_ip="$(hostname -I | cut -d ' ' -f1)"

changed=0

if [ $remove -eq 1 ]; then
  remove_proxy
else
  [ -f ${site_enabled} ]       || changed=1;
  [ -f ${site_available} ]     || changed=1;
  [ -f ${lxc_container_cert} ] || changed=1;
  [ -f ${lxc_container_key} ]  || changed=1;
fi 

# make sure template exists
[ -e "${template}" ] || fatal "does not exist: ${template}"

# check to see if container exists
if [[ ! "$(lxc-ls)" =~ "${name}" ]]; then
  changed=0;
  if [ ${check} -eq 1 ]; then
    info "check-mode: can't create proxy; container ${name} doesn't exist"; exit 2;
  else
    fatal "can't create proxy; container ${name} doesn't exist"
  fi
fi

# make sure container is running and initialized
count=1
lxc-start -d -n ${name}
until [ $(lxc-attach -n ${name} -- cat /etc/inithooks.conf | wc -c) -eq 1 ] || [ $count -eq 24 ]; do
  sleep 5
  (( count++ ))
done

if [ ${changed} -eq 1 ]; then
  if [ ${check} -eq 1 ]; then
    info "check-mode: would have created ${domain} proxy ${name}"; exit 1;
  fi
  # fetch container cert and key
  cert="/etc/ssl/certs/cert.crt"
  key="/etc/ssl/certs/cert.key"
  lxc-attach -n ${name} -- test -f ${cert}
  if [ $? -ne 0 ]; then
    cert="/etc/ssl/certs/cert.pem"
    key="/etc/ssl/private/cert.key"
    lxc-attach -n ${name} -- test -f ${cert}
  fi
  if [ $? -ne 0 ]; then
    info "can't find ${name} cert; using host cert instead"
    (umask 377 && cat ${cert} > ${lxc_container_cert})
    (umask 377 && cat ${key} > ${lxc_container_key})
  else
    (umask 377 && lxc-attach -n ${name} -- cat ${cert} > ${lxc_container_cert})
    (umask 377 && lxc-attach -n ${name} -- cat ${key} > ${lxc_container_key})
  fi

  [ -f ${lxc_container_cert} ] || fatal "can't find ${lxc_container_cert}"
  [ -f ${lxc_container_key} ] || fatal "can't find ${lxc_container_key}"

  create_proxy;
else
  if [ ${check} -eq 1 ]; then
    info "check-mode: ${domain} proxy ${name} exists, no change required"
  else
    info "${domain} proxy ${name} exists, no change required"
  fi
  exit 0;
fi

